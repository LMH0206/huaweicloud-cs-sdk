/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * NOTE: This class is auto generated by the akka-scala (beta) swagger code generator program.
 */
package com.huaweicloud.cs.v1

import com.huaweicloud.cs.v1.model._
import org.json4s._

import scala.reflect.ClassTag

object EnumsSerializers {

  def all: Seq[Serializer[_]] = Seq[Serializer[_]]() :+
    new EnumNameSerializer(ClusterOverviewEntityEnums.BillingUnit) :+
    new EnumNameSerializer(ClusterOverviewEntityEnums.TimeUnit) :+
    new EnumNameSerializer(JobDetailEntityEnums.RunMode) :+
    new EnumNameSerializer(JobDetailEntityEnums.CheckpointMode) :+
    new EnumNameSerializer(JobEntityEnums.RunMode) :+
    new EnumNameSerializer(JobEntityEnums.CheckpointMode) :+
    new EnumNameSerializer(JobOverviewEntityEnums.BillingUnit) :+
    new EnumNameSerializer(JobOverviewEntityEnums.TimeUnit) :+
    new EnumNameSerializer(SubmitSqlJobRequestEnums.RunMode) :+
    new EnumNameSerializer(SubmitSqlJobRequestEnums.CheckpointMode) :+
    new EnumNameSerializer(UpdateSqlJobRequestEnums.RunMode) :+
    new EnumNameSerializer(UpdateSqlJobRequestEnums.CheckpointMode)


  private class EnumNameSerializer[E <: Enumeration : ClassTag](enum: E)
    extends Serializer[E#Value] {

    import JsonDSL._

    val EnumerationClass: Class[E#Value] = classOf[E#Value]

    def deserialize(implicit format: Formats):
    PartialFunction[(TypeInfo, JValue), E#Value] = {
      case (t@TypeInfo(EnumerationClass, _), json) if isValid(json) =>
        json match {
          case JString(value) =>
            enum.withName(value)
          case value =>
            throw new MappingException(s"Can't convert $value to $EnumerationClass")
        }
    }

    private[this] def isValid(json: JValue) = json match {
      case JString(value) if enum.values.exists(_.toString == value) => true
      case _ => false
    }

    def serialize(implicit format: Formats): PartialFunction[Any, JValue] = {
      case i: E#Value => i.toString
    }
  }

}
